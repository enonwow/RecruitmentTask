@page "/"
@using CsvHelper
@using Microsoft.AspNetCore.Components.Forms
@using RecruitmentTask.Calculator.Models
@using RecruitmentTask.DataAccess.Abstractions
@inject IDataHandler DataHandler
@rendermode InteractiveServer

<h3>Wybierz plik</h3>

<InputFile OnChange="OnChangeFileAsync" accept=".csv" />

@if (!string.IsNullOrEmpty(errorMessage))
{
    <p style="color: red;">@errorMessage</p>
}

@if (employees != null)
{
    <p> Wybierz filtr:
        <select @onchange="OnChangeDropDown">
            @foreach (var filter in filters)
            {
                <option value="@filter.Id">@filter.Name</option>
            }
        </select>
    </p>

    <table class="table">
        <thead>
            <tr>
                <th @onclick='() => SortBy("Id")'>Lp
                    @if (currentColumn == "Id")
                    {
                        <span>@(isAscending ? " ↓" : " ↑")</span>
                    }
                </th>

                <th @onclick='() => SortBy("Name")'>Imię
                    @if (currentColumn == "Name")
                    {
                        <span>@(isAscending ? " ↓" : " ↑")</span>
                    }
                </th>

                <th @onclick='() => SortBy("Surname")'>Nazwisko
                    @if (currentColumn == "Surname")
                    {
                        <span>@(isAscending ? " ↓" : " ↑")</span>
                    }
                </th>

                <th @onclick='() => SortBy("Salary")'>Zarobki
                    @if (currentColumn == "Salary")
                    {
                        <span>@(isAscending ? " ↓" : " ↑")</span>
                    }
                </th>

                <th @onclick='() => SortBy("JobLevel")'>Poziom stanowiska
                    @if (currentColumn == "JobLevel")
                    {
                        <span>@(isAscending ? " ↓" : " ↑")</span>
                    }
                </th>

                <th @onclick='() => SortBy("City")'>Miejsce zmieszkania
                    @if (currentColumn == "City")
                    {
                        <span>@(isAscending ? " ↓" : " ↑")</span>
                    }
                </th>
                @if (showNetSalary)
                {
                    <th @onclick='() => SortBy("NetSalary")'>Zarobki netto
                        @if (currentColumn == "NetSalary")
                        {
                            <span>@(isAscending ? " ↓" : " ↑")</span>
                        }
                    </th>
                }
            </tr>
        </thead>
        <tbody>
            @foreach (var employee in employees)
            {
                <tr>
                    <td>@employee.Id</td>
                    <td>@employee.Name</td>
                    <td>@employee.Surname</td>
                    <td>@employee.Salary</td>
                    <td>@employee.JobLevel</td>
                    <td>@employee.City</td>
                    @if (showNetSalary)
                    {
                        <td>@employee.NetSalary</td>
                    }
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private List<EmployeeDTO>? employees;
    private bool showNetSalary = false;
    private string errorMessage = "";

    private string currentColumn = "Id";
    private bool isAscending = true;

    private List<Filter> filters = new List<Filter>()
    {
        new Filter(0, "Brak"),
        new Filter(1, "Najwyższe zarobki względem miasta"),
        new Filter(2, "Najwyższe zarobki względem poziomu stanowiska"),
        new Filter(3, "Najmniejsze zarobki netto względem miasta")
    };

    private class Filter
    {
        public int Id { get; private set; }
        public string Name { get; private set; }

        public Filter(int id, string name)
        {
            Id = id;
            Name = name;
        }
    }

    private async Task OnChangeFileAsync(InputFileChangeEventArgs e)
    {
        try
        {
            errorMessage = "";

            await using var stream = e.File.OpenReadStream();

            employees = await DataHandler
                .GetEmployeesAsync(stream);
        }
        catch (HeaderValidationException)
        {
            errorMessage = "Zły format pliku";
        }
        catch (Exception)
        {
            throw;
        }
    }

    private void OnChangeDropDown(ChangeEventArgs e)
    {
        int selectedId = Convert.ToInt32(e.Value);

        switch(selectedId)
        {
            case 0:
                employees = DataHandler.GetAllEmployeesFromCache();
                showNetSalary = false;
                break;
            case 1:
                employees = DataHandler.GetHighestSalaryByCity();
                showNetSalary = false;
                break;
            case 2:
                employees = DataHandler.GetHighestSalaryByJobLevel();
                showNetSalary = false;
                break;
            case 3:
                employees = DataHandler.GetTaxSalaryByCity();
                showNetSalary = true;
                break;
        }
    }

    private void SortBy(string column)
    {
        if (currentColumn == column)
        {
            isAscending = !isAscending;
        }
        else
        {
            currentColumn = column;
            isAscending = true;
        }

        switch(column)
        {
            case "Id":
                SortData(p => p.Id);
                break;
            case "Name":
                SortData(p => p.Name);
                break;
            case "Surname":
                SortData(p => p.Surname);
                break;
            case "Salary":
                SortData(p => p.Salary);
                break;
            case "JobLevel":
                SortData(p => p.JobLevel);
                break;
            case "City":
                SortData(p => p.City);
                break;
            case "NetSalary":
                SortData(p => p.NetSalary);
                break;
        }
    }

    private void SortData(Func<EmployeeDTO, object> func)
    {
        employees = isAscending
            ? employees.OrderBy(func).ToList()
            : employees.OrderByDescending(func).ToList();
    }
}
